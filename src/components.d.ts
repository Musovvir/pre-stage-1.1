/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { SCollaborationItems, } from "./components/s-collaboration/interface/common.interface";
import { SFooterItems, } from "./components/s-footer/interface/common.interface";
import { SHeaderItems, } from "./components/s-header/interface/common.interface";
import { SReviewItems, } from "./components/s-review/interface/common.interface";
import { SSectionFirstItems, } from "./components/s-section-first/interface/common.interface";
import { SSectionFourthItems, } from "./components/s-section-fourth/interface/common.interface";
import { SSectionSecondItems, } from "./components/s-section-second/interface/common.interface";
import { SSectionThirdItems, } from "./components/s-section-third/interface/common.interface";
import { SStaffingItems, } from "./components/s-staffing/interface/common.interface";
import { SSummaryItems, } from "./components/s-summary/interface/common.interface";
import { STimelineItems, } from "./components/s-timeline/interface/common.interface";
export namespace Components {
    interface MyComponent {
    }
    interface SCollaboration {
        "forCollaboration": any;
        /**
          * Интерфейс для Collaboration
         */
        "sectionThird": SCollaborationItems[];
    }
    interface SFooter {
        /**
          * Интерфейс для Footer
         */
        "footer": SFooterItems[];
        /**
          * Массив для Footer
         */
        "forFooter": any;
    }
    interface SHeader {
        /**
          * Массив для Header
         */
        "forHeader": any;
        /**
          * Интерфейс для Header
         */
        "header": SHeaderItems[];
    }
    interface SReview {
        /**
          * Интерфейс для SReviewItems
         */
        "Review": SReviewItems[];
        /**
          * Массив для Review
         */
        "forReview": any;
    }
    interface SSectionFirst {
        /**
          * Массив для SectionFirst
         */
        "forSectionFirst": any;
        /**
          * Интерфейс для SectionFirst
         */
        "sectionFirst": SSectionFirstItems[];
    }
    interface SSectionFourth {
        /**
          * Массив для SectionFourth
         */
        "forSectionFourth": any;
        /**
          * Интерфейс для SectionFourth
         */
        "sectionFourth": SSectionFourthItems[];
    }
    interface SSectionSecond {
        /**
          * Массив для SectionSecond
         */
        "forSectionSecond": any;
        /**
          * Интерфейс для SectionSecond
         */
        "sectionSecond": SSectionSecondItems[];
    }
    interface SSectionThird {
        /**
          * Клик по SectionThird
         */
        "forSectionThird": any;
        /**
          * Интерфейс для SectionThird
         */
        "sectionThird": SSectionThirdItems[];
    }
    interface SStaffing {
        /**
          * Интерфейс для Staffing
         */
        "Staffing": SStaffingItems[];
        "forStaffing": any;
    }
    interface SSummary {
        /**
          * Интерфейс для Summary
         */
        "Summary": SSummaryItems[];
        "forSummary": any;
    }
    interface STimeline {
        /**
          * Интерфейс для Timeline
         */
        "Timeline": STimelineItems[];
        /**
          * Клик по Timeline
         */
        "forTimeline": any;
    }
}
declare global {
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLSCollaborationElement extends Components.SCollaboration, HTMLStencilElement {
    }
    var HTMLSCollaborationElement: {
        prototype: HTMLSCollaborationElement;
        new (): HTMLSCollaborationElement;
    };
    interface HTMLSFooterElement extends Components.SFooter, HTMLStencilElement {
    }
    var HTMLSFooterElement: {
        prototype: HTMLSFooterElement;
        new (): HTMLSFooterElement;
    };
    interface HTMLSHeaderElement extends Components.SHeader, HTMLStencilElement {
    }
    var HTMLSHeaderElement: {
        prototype: HTMLSHeaderElement;
        new (): HTMLSHeaderElement;
    };
    interface HTMLSReviewElement extends Components.SReview, HTMLStencilElement {
    }
    var HTMLSReviewElement: {
        prototype: HTMLSReviewElement;
        new (): HTMLSReviewElement;
    };
    interface HTMLSSectionFirstElement extends Components.SSectionFirst, HTMLStencilElement {
    }
    var HTMLSSectionFirstElement: {
        prototype: HTMLSSectionFirstElement;
        new (): HTMLSSectionFirstElement;
    };
    interface HTMLSSectionFourthElement extends Components.SSectionFourth, HTMLStencilElement {
    }
    var HTMLSSectionFourthElement: {
        prototype: HTMLSSectionFourthElement;
        new (): HTMLSSectionFourthElement;
    };
    interface HTMLSSectionSecondElement extends Components.SSectionSecond, HTMLStencilElement {
    }
    var HTMLSSectionSecondElement: {
        prototype: HTMLSSectionSecondElement;
        new (): HTMLSSectionSecondElement;
    };
    interface HTMLSSectionThirdElement extends Components.SSectionThird, HTMLStencilElement {
    }
    var HTMLSSectionThirdElement: {
        prototype: HTMLSSectionThirdElement;
        new (): HTMLSSectionThirdElement;
    };
    interface HTMLSStaffingElement extends Components.SStaffing, HTMLStencilElement {
    }
    var HTMLSStaffingElement: {
        prototype: HTMLSStaffingElement;
        new (): HTMLSStaffingElement;
    };
    interface HTMLSSummaryElement extends Components.SSummary, HTMLStencilElement {
    }
    var HTMLSSummaryElement: {
        prototype: HTMLSSummaryElement;
        new (): HTMLSSummaryElement;
    };
    interface HTMLSTimelineElement extends Components.STimeline, HTMLStencilElement {
    }
    var HTMLSTimelineElement: {
        prototype: HTMLSTimelineElement;
        new (): HTMLSTimelineElement;
    };
    interface HTMLElementTagNameMap {
        "my-component": HTMLMyComponentElement;
        "s-collaboration": HTMLSCollaborationElement;
        "s-footer": HTMLSFooterElement;
        "s-header": HTMLSHeaderElement;
        "s-review": HTMLSReviewElement;
        "s-section-first": HTMLSSectionFirstElement;
        "s-section-fourth": HTMLSSectionFourthElement;
        "s-section-second": HTMLSSectionSecondElement;
        "s-section-third": HTMLSSectionThirdElement;
        "s-staffing": HTMLSStaffingElement;
        "s-summary": HTMLSSummaryElement;
        "s-timeline": HTMLSTimelineElement;
    }
}
declare namespace LocalJSX {
    interface MyComponent {
    }
    interface SCollaboration {
        "forCollaboration"?: any;
        /**
          * Клик по Image
         */
        "onClickCollaborationImage"?: (event: CustomEvent<any>) => void;
        /**
          * Клик по Subtext
         */
        "onClickCollaborationSubtext"?: (event: CustomEvent<any>) => void;
        /**
          * Клик по Subtitle
         */
        "onClickCollaborationSubtitle"?: (event: CustomEvent<any>) => void;
        /**
          * Интерфейс для Collaboration
         */
        "sectionThird"?: SCollaborationItems[];
    }
    interface SFooter {
        /**
          * Интерфейс для Footer
         */
        "footer"?: SFooterItems[];
        /**
          * Массив для Footer
         */
        "forFooter"?: any;
        /**
          * Клик по FooterCopyright
         */
        "onClickFooterCopyright"?: (event: CustomEvent<any>) => void;
        /**
          * Клик по FooterFacebook
         */
        "onClickFooterFacebook"?: (event: CustomEvent<any>) => void;
        /**
          * Клик по FooterIn
         */
        "onClickFooterIn"?: (event: CustomEvent<any>) => void;
    }
    interface SHeader {
        /**
          * Массив для Header
         */
        "forHeader"?: any;
        /**
          * Интерфейс для Header
         */
        "header"?: SHeaderItems[];
        /**
          * Клик по About
         */
        "onClickHeaderAboutUs"?: (event: CustomEvent<any>) => void;
        /**
          * Клик по Features
         */
        "onClickHeaderFeatures"?: (event: CustomEvent<any>) => void;
        /**
          * Клик по Home
         */
        "onClickHeaderHome"?: (event: CustomEvent<any>) => void;
        /**
          * Клик по How
         */
        "onClickHeaderHowItWorks"?: (event: CustomEvent<any>) => void;
        /**
          * Клик по лого
         */
        "onClickHeaderLogo"?: (event: CustomEvent<any>) => void;
        /**
          * Клик по SignIn
         */
        "onClickHeaderSignIn"?: (event: CustomEvent<any>) => void;
    }
    interface SReview {
        /**
          * Интерфейс для SReviewItems
         */
        "Review"?: SReviewItems[];
        /**
          * Массив для Review
         */
        "forReview"?: any;
        /**
          * Клик по Image
         */
        "onClickReviewImage"?: (event: CustomEvent<any>) => void;
        /**
          * Клик по Subtext
         */
        "onClickReviewSubtext"?: (event: CustomEvent<any>) => void;
        /**
          * Клик по Subtitle
         */
        "onClickReviewSubtitle"?: (event: CustomEvent<any>) => void;
    }
    interface SSectionFirst {
        /**
          * Массив для SectionFirst
         */
        "forSectionFirst"?: any;
        /**
          * Клик по Button
         */
        "onClickSectionFirstButton"?: (event: CustomEvent<any>) => void;
        /**
          * Клик по Image
         */
        "onClickSectionFirstImage"?: (event: CustomEvent<any>) => void;
        /**
          * Клик по Subtext
         */
        "onClickSectionFirstSubtext"?: (event: CustomEvent<any>) => void;
        /**
          * Клик по Text
         */
        "onClickSectionFirstText"?: (event: CustomEvent<any>) => void;
        /**
          * Интерфейс для SectionFirst
         */
        "sectionFirst"?: SSectionFirstItems[];
    }
    interface SSectionFourth {
        /**
          * Массив для SectionFourth
         */
        "forSectionFourth"?: any;
        /**
          * Клик по SectionFourthButton
         */
        "onClickSectionFourthButton"?: (event: CustomEvent<any>) => void;
        /**
          * Клик по SectionFourthImage
         */
        "onClickSectionFourthImage"?: (event: CustomEvent<any>) => void;
        /**
          * Клик по SectionFourthText
         */
        "onClickSectionFourthText"?: (event: CustomEvent<any>) => void;
        /**
          * Клик по SectionFourthTitle
         */
        "onClickSectionFourthTitle"?: (event: CustomEvent<any>) => void;
        /**
          * Интерфейс для SectionFourth
         */
        "sectionFourth"?: SSectionFourthItems[];
    }
    interface SSectionSecond {
        /**
          * Массив для SectionSecond
         */
        "forSectionSecond"?: any;
        /**
          * Клик по MyBlock
         */
        "onClickSectionSecondMyBlock"?: (event: CustomEvent<any>) => void;
        /**
          * Клик по Subtitle
         */
        "onClickSectionSecondSubtitle"?: (event: CustomEvent<any>) => void;
        /**
          * Клик по Title
         */
        "onClickSectionSecondTitle"?: (event: CustomEvent<any>) => void;
        /**
          * Интерфейс для SectionSecond
         */
        "sectionSecond"?: SSectionSecondItems[];
    }
    interface SSectionThird {
        /**
          * Клик по SectionThird
         */
        "forSectionThird"?: any;
        /**
          * Клик по Image
         */
        "onClickSectionThirdImage"?: (event: CustomEvent<any>) => void;
        /**
          * Клик по Subtext
         */
        "onClickSectionThirdSubtext"?: (event: CustomEvent<any>) => void;
        /**
          * Клик по Subtitle
         */
        "onClickSectionThirdSubtitle"?: (event: CustomEvent<any>) => void;
        /**
          * Клик по Text
         */
        "onClickSectionThirdText"?: (event: CustomEvent<any>) => void;
        /**
          * Клик по Title
         */
        "onClickSectionThirdTitle"?: (event: CustomEvent<any>) => void;
        /**
          * Интерфейс для SectionThird
         */
        "sectionThird"?: SSectionThirdItems[];
    }
    interface SStaffing {
        /**
          * Интерфейс для Staffing
         */
        "Staffing"?: SStaffingItems[];
        "forStaffing"?: any;
        /**
          * Клик по Image
         */
        "onClickStaffingImage"?: (event: CustomEvent<any>) => void;
        /**
          * Клик по Subtext
         */
        "onClickStaffingSubtext"?: (event: CustomEvent<any>) => void;
        /**
          * Клик по Subtitle
         */
        "onClickStaffingSubtitle"?: (event: CustomEvent<any>) => void;
    }
    interface SSummary {
        /**
          * Интерфейс для Summary
         */
        "Summary"?: SSummaryItems[];
        "forSummary"?: any;
        /**
          * Клик по Image
         */
        "onClickSummaryImage"?: (event: CustomEvent<any>) => void;
        /**
          * Клик по Subtext
         */
        "onClickSummarySubtext"?: (event: CustomEvent<any>) => void;
        /**
          * Клик по Subtitle
         */
        "onClickSummarySubtitle"?: (event: CustomEvent<any>) => void;
    }
    interface STimeline {
        /**
          * Интерфейс для Timeline
         */
        "Timeline"?: STimelineItems[];
        /**
          * Клик по Timeline
         */
        "forTimeline"?: any;
        /**
          * Клик по Image
         */
        "onClickTimelineImage"?: (event: CustomEvent<any>) => void;
        /**
          * Клик по Subtext
         */
        "onClickTimelineSubtext"?: (event: CustomEvent<any>) => void;
        /**
          * Клик по Subtitle
         */
        "onClickTimelineSubtitle"?: (event: CustomEvent<any>) => void;
    }
    interface IntrinsicElements {
        "my-component": MyComponent;
        "s-collaboration": SCollaboration;
        "s-footer": SFooter;
        "s-header": SHeader;
        "s-review": SReview;
        "s-section-first": SSectionFirst;
        "s-section-fourth": SSectionFourth;
        "s-section-second": SSectionSecond;
        "s-section-third": SSectionThird;
        "s-staffing": SStaffing;
        "s-summary": SSummary;
        "s-timeline": STimeline;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "s-collaboration": LocalJSX.SCollaboration & JSXBase.HTMLAttributes<HTMLSCollaborationElement>;
            "s-footer": LocalJSX.SFooter & JSXBase.HTMLAttributes<HTMLSFooterElement>;
            "s-header": LocalJSX.SHeader & JSXBase.HTMLAttributes<HTMLSHeaderElement>;
            "s-review": LocalJSX.SReview & JSXBase.HTMLAttributes<HTMLSReviewElement>;
            "s-section-first": LocalJSX.SSectionFirst & JSXBase.HTMLAttributes<HTMLSSectionFirstElement>;
            "s-section-fourth": LocalJSX.SSectionFourth & JSXBase.HTMLAttributes<HTMLSSectionFourthElement>;
            "s-section-second": LocalJSX.SSectionSecond & JSXBase.HTMLAttributes<HTMLSSectionSecondElement>;
            "s-section-third": LocalJSX.SSectionThird & JSXBase.HTMLAttributes<HTMLSSectionThirdElement>;
            "s-staffing": LocalJSX.SStaffing & JSXBase.HTMLAttributes<HTMLSStaffingElement>;
            "s-summary": LocalJSX.SSummary & JSXBase.HTMLAttributes<HTMLSSummaryElement>;
            "s-timeline": LocalJSX.STimeline & JSXBase.HTMLAttributes<HTMLSTimelineElement>;
        }
    }
}
